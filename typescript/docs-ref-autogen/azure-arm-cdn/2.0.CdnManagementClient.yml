### YamlMime:UniversalReference
items:
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient
    name: CdnManagementClient
    fullName: CdnManagementClient
    children:
      - azure-arm-cdn - v4.2.0.CdnManagementClient.acceptLanguage
      - azure-arm-cdn - v4.2.0.CdnManagementClient.addUserAgentInfo
      - azure-arm-cdn - v4.2.0.CdnManagementClient.apiVersion
      - azure-arm-cdn - v4.2.0.CdnManagementClient.constructor
      - azure-arm-cdn - v4.2.0.CdnManagementClient.checkNameAvailability
      - azure-arm-cdn - v4.2.0.CdnManagementClient.checkNameAvailability_2
      - azure-arm-cdn - v4.2.0.CdnManagementClient.checkNameAvailability_1
      - >-
        azure-arm-cdn -
        v4.2.0.CdnManagementClient.checkNameAvailabilityWithHttpOperationResponse
      - >-
        azure-arm-cdn -
        v4.2.0.CdnManagementClient.checkNameAvailabilityWithSubscription
      - >-
        azure-arm-cdn -
        v4.2.0.CdnManagementClient.checkNameAvailabilityWithSubscription_2
      - >-
        azure-arm-cdn -
        v4.2.0.CdnManagementClient.checkNameAvailabilityWithSubscription_1
      - >-
        azure-arm-cdn -
        v4.2.0.CdnManagementClient.checkNameAvailabilityWithSubscriptionWithHttpOperationResponse
      - azure-arm-cdn - v4.2.0.CdnManagementClient.credentials
      - azure-arm-cdn - v4.2.0.CdnManagementClient.customDomains
      - azure-arm-cdn - v4.2.0.CdnManagementClient.edgeNodes
      - azure-arm-cdn - v4.2.0.CdnManagementClient.endpoints
      - azure-arm-cdn - v4.2.0.CdnManagementClient.generateClientRequestId
      - >-
        azure-arm-cdn -
        v4.2.0.CdnManagementClient.getLongRunningOperationResult_2
      - azure-arm-cdn - v4.2.0.CdnManagementClient.getLongRunningOperationResult
      - >-
        azure-arm-cdn -
        v4.2.0.CdnManagementClient.getLongRunningOperationResult_1
      - azure-arm-cdn - v4.2.0.CdnManagementClient.getPackageJsonInfo
      - >-
        azure-arm-cdn -
        v4.2.0.CdnManagementClient.longRunningOperationRetryTimeout
      - azure-arm-cdn - v4.2.0.CdnManagementClient.operations
      - azure-arm-cdn - v4.2.0.CdnManagementClient.origins
      - azure-arm-cdn - v4.2.0.CdnManagementClient.profiles
      - azure-arm-cdn - v4.2.0.CdnManagementClient.resourceUsageOperations
      - azure-arm-cdn - v4.2.0.CdnManagementClient.sendLongRunningRequest_1
      - azure-arm-cdn - v4.2.0.CdnManagementClient.sendLongRunningRequest
      - >-
        azure-arm-cdn -
        v4.2.0.CdnManagementClient.sendLongRunningRequestWithHttpOperationResponse
      - azure-arm-cdn - v4.2.0.CdnManagementClient.sendRequest_1
      - azure-arm-cdn - v4.2.0.CdnManagementClient.sendRequest
      - >-
        azure-arm-cdn -
        v4.2.0.CdnManagementClient.sendRequestWithHttpOperationResponse
      - azure-arm-cdn - v4.2.0.CdnManagementClient.subscriptionId
      - azure-arm-cdn - v4.2.0.CdnManagementClient.validateProbe
      - azure-arm-cdn - v4.2.0.CdnManagementClient.validateProbe_2
      - azure-arm-cdn - v4.2.0.CdnManagementClient.validateProbe_1
      - >-
        azure-arm-cdn -
        v4.2.0.CdnManagementClient.validateProbeWithHttpOperationResponse
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: AzureServiceClient
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.acceptLanguage
    name: acceptLanguage
    fullName: acceptLanguage
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'acceptLanguage: string'
      return:
        type:
          - string
        description: ''
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.addUserAgentInfo
    name: addUserAgentInfo(any)
    children: []
    type: method
    langs:
      - typeScript
    summary: Adds custom information to user agent header
    syntax:
      content: 'function addUserAgentInfo(additionalUserAgentInfo: any)'
      parameters:
        - id: additionalUserAgentInfo
          type:
            - any
          description: |
            information to be added to user agent header, as string.
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.apiVersion
    name: apiVersion
    fullName: apiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'apiVersion: string'
      return:
        type:
          - string
        description: ''
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.constructor
    name: >-
      CdnManagementClient(ServiceClientCredentials, string, string,
      AzureServiceClientOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Initializes a new instance of the CdnManagementClient class.
    syntax:
      content: >-
        new CdnManagementClient(credentials: ServiceClientCredentials,
        subscriptionId: string, baseUri?: string, options?:
        AzureServiceClientOptions)
      parameters:
        - id: credentials
          type:
            - ServiceClientCredentials
          description: |
            Credentials needed for the client to connect to Azure.
        - id: subscriptionId
          type:
            - string
          description: |
            Azure Subscription ID.
        - id: baseUri
          type:
            - string
          description: ''
          optional: true
        - id: options
          type:
            - AzureServiceClientOptions
          description: ''
          optional: true
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.checkNameAvailability
    name: 'checkNameAvailability(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Check the availability of a resource name. This is needed for resources
      where name is globally unique, such as a CDN endpoint.
    syntax:
      content: 'function checkNameAvailability(name: string, options?: Object)'
      parameters:
        - id: name
          type:
            - string
          description: |
            The resource name to validate.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-cdn - v4.2.0.CheckNameAvailabilityOutput>
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {CheckNameAvailabilityOutput} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {CheckNameAvailabilityOutput} [result]   - The deserialized result object if an error did not occur.
                               See {@link CheckNameAvailabilityOutput} for more
                               information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.checkNameAvailability_2
    name: >-
      checkNameAvailability(string, Object,
      ServiceCallback<CheckNameAvailabilityOutput>)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Check the availability of a resource name. This is needed for resources
      where name is globally unique, such as a CDN endpoint.
    syntax:
      content: >-
        function checkNameAvailability(name: string, options: Object, callback:
        ServiceCallback<CheckNameAvailabilityOutput>)
      parameters:
        - id: name
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<azure-arm-cdn -
              v4.2.0.CheckNameAvailabilityOutput>
          description: ''
      return:
        type:
          - Promise<azure-arm-cdn - v4.2.0.CheckNameAvailabilityOutput>
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {CheckNameAvailabilityOutput} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {CheckNameAvailabilityOutput} [result]   - The deserialized result object if an error did not occur.
                               See {@link CheckNameAvailabilityOutput} for more
                               information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.checkNameAvailability_1
    name: >-
      checkNameAvailability(string,
      ServiceCallback<CheckNameAvailabilityOutput>)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Check the availability of a resource name. This is needed for resources
      where name is globally unique, such as a CDN endpoint.
    syntax:
      content: >-
        function checkNameAvailability(name: string, callback:
        ServiceCallback<CheckNameAvailabilityOutput>)
      parameters:
        - id: name
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<azure-arm-cdn -
              v4.2.0.CheckNameAvailabilityOutput>
          description: ''
      return:
        type:
          - Promise<azure-arm-cdn - v4.2.0.CheckNameAvailabilityOutput>
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {CheckNameAvailabilityOutput} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {CheckNameAvailabilityOutput} [result]   - The deserialized result object if an error did not occur.
                               See {@link CheckNameAvailabilityOutput} for more
                               information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
    package: azure-arm-cdn - v4
  - uid: >-
      azure-arm-cdn -
      v4.2.0.CdnManagementClient.checkNameAvailabilityWithHttpOperationResponse
    name: 'checkNameAvailabilityWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Check the availability of a resource name. This is needed for resources
      where name is globally unique, such as a CDN endpoint.
    syntax:
      content: >-
        function checkNameAvailabilityWithHttpOperationResponse(name: string,
        options?: Object)
      parameters:
        - id: name
          type:
            - string
          description: |
            The resource name to validate.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-arm-cdn -
            v4.2.0.CheckNameAvailabilityOutput>>
        description: A promise is returned
    package: azure-arm-cdn - v4
  - uid: >-
      azure-arm-cdn -
      v4.2.0.CdnManagementClient.checkNameAvailabilityWithSubscription
    name: 'checkNameAvailabilityWithSubscription(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Check the availability of a resource name. This is needed for resources
      where name is globally unique, such as a CDN endpoint.
    syntax:
      content: >-
        function checkNameAvailabilityWithSubscription(name: string, options?:
        Object)
      parameters:
        - id: name
          type:
            - string
          description: |
            The resource name to validate.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-cdn - v4.2.0.CheckNameAvailabilityOutput>
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {CheckNameAvailabilityOutput} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {CheckNameAvailabilityOutput} [result]   - The deserialized result object if an error did not occur.
                               See {@link CheckNameAvailabilityOutput} for more
                               information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
    package: azure-arm-cdn - v4
  - uid: >-
      azure-arm-cdn -
      v4.2.0.CdnManagementClient.checkNameAvailabilityWithSubscription_2
    name: >-
      checkNameAvailabilityWithSubscription(string, Object,
      ServiceCallback<CheckNameAvailabilityOutput>)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Check the availability of a resource name. This is needed for resources
      where name is globally unique, such as a CDN endpoint.
    syntax:
      content: >-
        function checkNameAvailabilityWithSubscription(name: string, options:
        Object, callback: ServiceCallback<CheckNameAvailabilityOutput>)
      parameters:
        - id: name
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<azure-arm-cdn -
              v4.2.0.CheckNameAvailabilityOutput>
          description: ''
      return:
        type:
          - Promise<azure-arm-cdn - v4.2.0.CheckNameAvailabilityOutput>
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {CheckNameAvailabilityOutput} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {CheckNameAvailabilityOutput} [result]   - The deserialized result object if an error did not occur.
                               See {@link CheckNameAvailabilityOutput} for more
                               information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
    package: azure-arm-cdn - v4
  - uid: >-
      azure-arm-cdn -
      v4.2.0.CdnManagementClient.checkNameAvailabilityWithSubscription_1
    name: >-
      checkNameAvailabilityWithSubscription(string,
      ServiceCallback<CheckNameAvailabilityOutput>)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Check the availability of a resource name. This is needed for resources
      where name is globally unique, such as a CDN endpoint.
    syntax:
      content: >-
        function checkNameAvailabilityWithSubscription(name: string, callback:
        ServiceCallback<CheckNameAvailabilityOutput>)
      parameters:
        - id: name
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<azure-arm-cdn -
              v4.2.0.CheckNameAvailabilityOutput>
          description: ''
      return:
        type:
          - Promise<azure-arm-cdn - v4.2.0.CheckNameAvailabilityOutput>
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {CheckNameAvailabilityOutput} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {CheckNameAvailabilityOutput} [result]   - The deserialized result object if an error did not occur.
                               See {@link CheckNameAvailabilityOutput} for more
                               information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
    package: azure-arm-cdn - v4
  - uid: >-
      azure-arm-cdn -
      v4.2.0.CdnManagementClient.checkNameAvailabilityWithSubscriptionWithHttpOperationResponse
    name: >-
      checkNameAvailabilityWithSubscriptionWithHttpOperationResponse(string,
      Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Check the availability of a resource name. This is needed for resources
      where name is globally unique, such as a CDN endpoint.
    syntax:
      content: >-
        function
        checkNameAvailabilityWithSubscriptionWithHttpOperationResponse(name:
        string, options?: Object)
      parameters:
        - id: name
          type:
            - string
          description: |
            The resource name to validate.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-arm-cdn -
            v4.2.0.CheckNameAvailabilityOutput>>
        description: A promise is returned
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.credentials
    name: credentials
    fullName: credentials
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'credentials: ServiceClientCredentials'
      return:
        type:
          - ServiceClientCredentials
        description: ''
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.customDomains
    name: customDomains
    fullName: customDomains
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'customDomains: CustomDomains'
      return:
        type:
          - azure-arm-cdn - v4.2.0.CustomDomains
        description: ''
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.edgeNodes
    name: edgeNodes
    fullName: edgeNodes
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'edgeNodes: EdgeNodes'
      return:
        type:
          - azure-arm-cdn - v4.2.0.EdgeNodes
        description: ''
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.endpoints
    name: endpoints
    fullName: endpoints
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'endpoints: Endpoints'
      return:
        type:
          - azure-arm-cdn - v4.2.0.Endpoints
        description: ''
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.generateClientRequestId
    name: generateClientRequestId
    fullName: generateClientRequestId
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'generateClientRequestId: boolean'
      return:
        type:
          - boolean
        description: ''
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.getLongRunningOperationResult_2
    name: >-
      getLongRunningOperationResult(HttpOperationResponse<TResult>,
      RequestOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getLongRunningOperationResult<TResult>(resultOfInitialRequest:
        HttpOperationResponse<TResult>, options?: RequestOptions)
      parameters:
        - id: resultOfInitialRequest
          type:
            - HttpOperationResponse<TResult>
          description: ''
        - id: options
          type:
            - RequestOptions
          description: ''
          optional: true
      return:
        type:
          - Promise<TResult>
        description: ''
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.getLongRunningOperationResult
    name: >-
      getLongRunningOperationResult(HttpOperationResponse<TResult>,
      RequestOptions, ServiceCallback<TResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getLongRunningOperationResult<TResult>(resultOfInitialRequest:
        HttpOperationResponse<TResult>, options: RequestOptions, callback:
        ServiceCallback<TResult>)
      parameters:
        - id: resultOfInitialRequest
          type:
            - HttpOperationResponse<TResult>
          description: ''
        - id: options
          type:
            - RequestOptions
          description: ''
        - id: callback
          type:
            - ServiceCallback<TResult>
          description: ''
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.getLongRunningOperationResult_1
    name: >-
      getLongRunningOperationResult(HttpOperationResponse<TResult>,
      ServiceCallback<TResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getLongRunningOperationResult<TResult>(resultOfInitialRequest:
        HttpOperationResponse<TResult>, callback: ServiceCallback<TResult>)
      parameters:
        - id: resultOfInitialRequest
          type:
            - HttpOperationResponse<TResult>
          description: ''
        - id: callback
          type:
            - ServiceCallback<TResult>
          description: ''
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.getPackageJsonInfo
    name: getPackageJsonInfo(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Attempts to find package.json for the given azure nodejs package.

      If found, returns the name and version of the package by reading the
      package.json

      If package.json is not found, returns a default value.
    syntax:
      content: 'function getPackageJsonInfo(managementClientDir: string)'
      parameters:
        - id: managementClientDir
          type:
            - string
          description: pass the directory of the specific azure management client.
      return:
        type:
          - Object
        description: packageJsonInfo - "name" and "version" of the desired package.
    package: azure-arm-cdn - v4
  - uid: >-
      azure-arm-cdn -
      v4.2.0.CdnManagementClient.longRunningOperationRetryTimeout
    name: longRunningOperationRetryTimeout
    fullName: longRunningOperationRetryTimeout
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'longRunningOperationRetryTimeout: number'
      return:
        type:
          - number
        description: ''
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.operations
    name: operations
    fullName: operations
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'operations: Operations'
      return:
        type:
          - azure-arm-cdn - v4.2.0.Operations
        description: ''
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.origins
    name: origins
    fullName: origins
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'origins: Origins'
      return:
        type:
          - azure-arm-cdn - v4.2.0.Origins
        description: ''
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.profiles
    name: profiles
    fullName: profiles
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'profiles: Profiles'
      return:
        type:
          - azure-arm-cdn - v4.2.0.Profiles
        description: ''
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.resourceUsageOperations
    name: resourceUsageOperations
    fullName: resourceUsageOperations
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'resourceUsageOperations: ResourceUsageOperations'
      return:
        type:
          - azure-arm-cdn - v4.2.0.ResourceUsageOperations
        description: ''
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.sendLongRunningRequest_1
    name: >-
      sendLongRunningRequest(LongRunningUrlBasedRequestPrepareOptions |
      LongRunningPathTemplateBasedRequestPrepareOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function sendLongRunningRequest<TResult>(options:
        LongRunningUrlBasedRequestPrepareOptions |
        LongRunningPathTemplateBasedRequestPrepareOptions)
      parameters:
        - id: options
          type:
            - >-
              LongRunningUrlBasedRequestPrepareOptions |
              LongRunningPathTemplateBasedRequestPrepareOptions
          description: ''
      return:
        type:
          - Promise<TResult>
        description: ''
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.sendLongRunningRequest
    name: >-
      sendLongRunningRequest(LongRunningUrlBasedRequestPrepareOptions |
      LongRunningPathTemplateBasedRequestPrepareOptions,
      ServiceCallback<TResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function sendLongRunningRequest<TResult>(options:
        LongRunningUrlBasedRequestPrepareOptions |
        LongRunningPathTemplateBasedRequestPrepareOptions, callback:
        ServiceCallback<TResult>)
      parameters:
        - id: options
          type:
            - >-
              LongRunningUrlBasedRequestPrepareOptions |
              LongRunningPathTemplateBasedRequestPrepareOptions
          description: ''
        - id: callback
          type:
            - ServiceCallback<TResult>
          description: ''
    package: azure-arm-cdn - v4
  - uid: >-
      azure-arm-cdn -
      v4.2.0.CdnManagementClient.sendLongRunningRequestWithHttpOperationResponse
    name: >-
      sendLongRunningRequestWithHttpOperationResponse(LongRunningUrlBasedRequestPrepareOptions
      | LongRunningPathTemplateBasedRequestPrepareOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function
        sendLongRunningRequestWithHttpOperationResponse<TResult>(options:
        LongRunningUrlBasedRequestPrepareOptions |
        LongRunningPathTemplateBasedRequestPrepareOptions)
      parameters:
        - id: options
          type:
            - >-
              LongRunningUrlBasedRequestPrepareOptions |
              LongRunningPathTemplateBasedRequestPrepareOptions
          description: ''
      return:
        type:
          - Promise<HttpOperationResponse<TResult>>
        description: ''
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.sendRequest_1
    name: >-
      sendRequest(PathTemplateBasedRequestPrepareOptions |
      UrlBasedRequestPrepareOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function sendRequest<TResult>(options:
        PathTemplateBasedRequestPrepareOptions | UrlBasedRequestPrepareOptions)
      parameters:
        - id: options
          type:
            - >-
              PathTemplateBasedRequestPrepareOptions |
              UrlBasedRequestPrepareOptions
          description: ''
      return:
        type:
          - Promise<TResult>
        description: ''
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.sendRequest
    name: >-
      sendRequest(PathTemplateBasedRequestPrepareOptions |
      UrlBasedRequestPrepareOptions, ServiceCallback<TResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function sendRequest<TResult>(options:
        PathTemplateBasedRequestPrepareOptions | UrlBasedRequestPrepareOptions,
        callback: ServiceCallback<TResult>)
      parameters:
        - id: options
          type:
            - >-
              PathTemplateBasedRequestPrepareOptions |
              UrlBasedRequestPrepareOptions
          description: ''
        - id: callback
          type:
            - ServiceCallback<TResult>
          description: ''
    package: azure-arm-cdn - v4
  - uid: >-
      azure-arm-cdn -
      v4.2.0.CdnManagementClient.sendRequestWithHttpOperationResponse
    name: >-
      sendRequestWithHttpOperationResponse(PathTemplateBasedRequestPrepareOptions
      | UrlBasedRequestPrepareOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function sendRequestWithHttpOperationResponse<TResult>(options:
        PathTemplateBasedRequestPrepareOptions | UrlBasedRequestPrepareOptions)
      parameters:
        - id: options
          type:
            - >-
              PathTemplateBasedRequestPrepareOptions |
              UrlBasedRequestPrepareOptions
          description: ''
      return:
        type:
          - Promise<HttpOperationResponse<TResult>>
        description: ''
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.subscriptionId
    name: subscriptionId
    fullName: subscriptionId
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'subscriptionId: string'
      return:
        type:
          - string
        description: ''
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.validateProbe
    name: 'validateProbe(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Check if the probe path is a valid path and the file can be accessed.
      Probe

      path is the path to a file hosted on the origin server to help accelerate

      the delivery of dynamic content via the CDN endpoint. This path is
      relative

      to the origin path specified in the endpoint configuration.
    syntax:
      content: 'function validateProbe(probeURL: string, options?: Object)'
      parameters:
        - id: probeURL
          type:
            - string
          description: |
            The probe URL to validate.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-cdn - v4.2.0.ValidateProbeOutput>
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {ValidateProbeOutput} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {ValidateProbeOutput} [result]   - The deserialized result object if an error did not occur.
                               See {@link ValidateProbeOutput} for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.validateProbe_2
    name: 'validateProbe(string, Object, ServiceCallback<ValidateProbeOutput>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Check if the probe path is a valid path and the file can be accessed.
      Probe

      path is the path to a file hosted on the origin server to help accelerate

      the delivery of dynamic content via the CDN endpoint. This path is
      relative

      to the origin path specified in the endpoint configuration.
    syntax:
      content: >-
        function validateProbe(probeURL: string, options: Object, callback:
        ServiceCallback<ValidateProbeOutput>)
      parameters:
        - id: probeURL
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-cdn - v4.2.0.ValidateProbeOutput>
          description: ''
      return:
        type:
          - Promise<azure-arm-cdn - v4.2.0.ValidateProbeOutput>
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {ValidateProbeOutput} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {ValidateProbeOutput} [result]   - The deserialized result object if an error did not occur.
                               See {@link ValidateProbeOutput} for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
    package: azure-arm-cdn - v4
  - uid: azure-arm-cdn - v4.2.0.CdnManagementClient.validateProbe_1
    name: 'validateProbe(string, ServiceCallback<ValidateProbeOutput>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Check if the probe path is a valid path and the file can be accessed.
      Probe

      path is the path to a file hosted on the origin server to help accelerate

      the delivery of dynamic content via the CDN endpoint. This path is
      relative

      to the origin path specified in the endpoint configuration.
    syntax:
      content: >-
        function validateProbe(probeURL: string, callback:
        ServiceCallback<ValidateProbeOutput>)
      parameters:
        - id: probeURL
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-cdn - v4.2.0.ValidateProbeOutput>
          description: ''
      return:
        type:
          - Promise<azure-arm-cdn - v4.2.0.ValidateProbeOutput>
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {ValidateProbeOutput} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {ValidateProbeOutput} [result]   - The deserialized result object if an error did not occur.
                               See {@link ValidateProbeOutput} for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
    package: azure-arm-cdn - v4
  - uid: >-
      azure-arm-cdn -
      v4.2.0.CdnManagementClient.validateProbeWithHttpOperationResponse
    name: 'validateProbeWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Check if the probe path is a valid path and the file can be accessed.
      Probe

      path is the path to a file hosted on the origin server to help accelerate

      the delivery of dynamic content via the CDN endpoint. This path is
      relative

      to the origin path specified in the endpoint configuration.
    syntax:
      content: >-
        function validateProbeWithHttpOperationResponse(probeURL: string,
        options?: Object)
      parameters:
        - id: probeURL
          type:
            - string
          description: |
            The probe URL to validate.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-arm-cdn -
            v4.2.0.ValidateProbeOutput>>
        description: A promise is returned
    package: azure-arm-cdn - v4
references:
  - uid: azure-arm-cdn - v4.2.0.CustomDomains
    name: CustomDomains
    spec.typeScript:
      - name: CustomDomains
        fullName: CustomDomains
        uid: azure-arm-cdn - v4.2.0.CustomDomains
  - uid: azure-arm-cdn - v4.2.0.EdgeNodes
    name: EdgeNodes
    spec.typeScript:
      - name: EdgeNodes
        fullName: EdgeNodes
        uid: azure-arm-cdn - v4.2.0.EdgeNodes
  - uid: azure-arm-cdn - v4.2.0.Endpoints
    name: Endpoints
    spec.typeScript:
      - name: Endpoints
        fullName: Endpoints
        uid: azure-arm-cdn - v4.2.0.Endpoints
  - uid: azure-arm-cdn - v4.2.0.Operations
    name: Operations
    spec.typeScript:
      - name: Operations
        fullName: Operations
        uid: azure-arm-cdn - v4.2.0.Operations
  - uid: azure-arm-cdn - v4.2.0.Origins
    name: Origins
    spec.typeScript:
      - name: Origins
        fullName: Origins
        uid: azure-arm-cdn - v4.2.0.Origins
  - uid: azure-arm-cdn - v4.2.0.Profiles
    name: Profiles
    spec.typeScript:
      - name: Profiles
        fullName: Profiles
        uid: azure-arm-cdn - v4.2.0.Profiles
  - uid: azure-arm-cdn - v4.2.0.ResourceUsageOperations
    name: ResourceUsageOperations
    spec.typeScript:
      - name: ResourceUsageOperations
        fullName: ResourceUsageOperations
        uid: azure-arm-cdn - v4.2.0.ResourceUsageOperations
  - uid: Promise<azure-arm-cdn - v4.2.0.CheckNameAvailabilityOutput>
    name: CheckNameAvailabilityOutput>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: CheckNameAvailabilityOutput
        fullName: CheckNameAvailabilityOutput
        uid: azure-arm-cdn - v4.2.0.CheckNameAvailabilityOutput
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-arm-cdn - v4.2.0.CheckNameAvailabilityOutput>
    name: CheckNameAvailabilityOutput>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: CheckNameAvailabilityOutput
        fullName: CheckNameAvailabilityOutput
        uid: azure-arm-cdn - v4.2.0.CheckNameAvailabilityOutput
      - name: '>'
        fullName: '>'
  - uid: >-
      Promise<HttpOperationResponse<azure-arm-cdn -
      v4.2.0.CheckNameAvailabilityOutput>>
    name: CheckNameAvailabilityOutput>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: CheckNameAvailabilityOutput
        fullName: CheckNameAvailabilityOutput
        uid: azure-arm-cdn - v4.2.0.CheckNameAvailabilityOutput
      - name: '>>'
        fullName: '>>'
  - uid: Promise<azure-arm-cdn - v4.2.0.ValidateProbeOutput>
    name: ValidateProbeOutput>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ValidateProbeOutput
        fullName: ValidateProbeOutput
        uid: azure-arm-cdn - v4.2.0.ValidateProbeOutput
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-arm-cdn - v4.2.0.ValidateProbeOutput>
    name: ValidateProbeOutput>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ValidateProbeOutput
        fullName: ValidateProbeOutput
        uid: azure-arm-cdn - v4.2.0.ValidateProbeOutput
      - name: '>'
        fullName: '>'
  - uid: Promise<HttpOperationResponse<azure-arm-cdn - v4.2.0.ValidateProbeOutput>>
    name: ValidateProbeOutput>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: ValidateProbeOutput
        fullName: ValidateProbeOutput
        uid: azure-arm-cdn - v4.2.0.ValidateProbeOutput
      - name: '>>'
        fullName: '>>'
